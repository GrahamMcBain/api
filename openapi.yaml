# TODO amount fields now take a currency code. USD default
#  - Look at https://godoc.org/golang.org/x/text/currency

# TODO GET endpoints should use the OAS 3 Link Object specification
#  - https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#linkObject

# TODO Transfers objects now have an estimated ?posting? date
# TODO add Documents allowing Customer ID(passport, drivers license, idCard) to be uploaded and verified
# TODO Webhooks have been documented for retrieving events
# TODO add support for retrieving 1099-k for Originators

# Property names must conform to the following guidelines:
# - Resources are plural nouns /customers/
# - Property names should be meaningful names with defined semantics.
# - Property names must be camel-cased, ASCII strings.
# - The first character must be a letter, an underscore (_) or a dollar sign ($).
# - Subsequent characters can be a letter, a digit, an underscore, or a dollar sign.
# - Reserved JavaScript keywords should be avoided

openapi: "3.0.0"
info:
  description: |
    _Note_: We're currently in pre-release of our API. We expect breaking changes before launching v1 so please join our [mailing list](https://groups.google.com/forum/#!forum/moov-users) for more updates and notices.

    The Moov API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable, resource-oriented URLs, and uses HTTP response codes to indicate API errors. We use built-in HTTP features, like HTTP authentication and HTTP verbs, which are understood by off-the-shelf HTTP clients. We support [cross-origin resource sharing](http://en.wikipedia.org/wiki/Cross-origin_resource_sharing), allowing you to interact securely with our API from client-side web applications (never expose your secret API key in any public website's client-side code). [JSON](http://www.json.org/) is returned by all API responses, including errors, although you can generate client code via [OpenAPI](https://swagger.io/) code generation to convert responses to appropriate language-specific objects.

    The Moov API offers two methods of authentication, Cookie and OAuth2 access tokens. The cookie auth is designed for web browsers while the OAuth2 authentication is designed for automated access of our API.

    When an API requires a token generated using OAuth (2-legged), no end user is involved. You generate the token by passing your client credentials (Client Id and Client Secret) in a simple call to Create access token (`/oauth2/token`). The operation returns a token that is valid for a few hours and can be renewed; when it expires, you just repeat the call and get a new token. Making additional token requests will keep generating tokens. There are no hard or soft limits.

    Cookie auth is setup by provided (`/users/login`) a valid email and password combination. A `Set-Cookie` header is returned on success, which can be used in later calls. Cookie auth is required to generate OAuth2 client credentials.

    The Moov API offers many services:
    - Automated Clearing House (ACH) origination and file management
    - Transfers and ACH Customer management.
    - X9 / Image Cash Ledger (ICL) specification support (image uplaod)

    ACH is implemented a RESTful API enabling ACH transactions to be submitted and received without a deep understanding of a full NACHA file specification.

    An *Originator* can initiate a *Transfer* as either a push (credit) or pull (debit) to a *Customer*. Originators and Customers must have a valid *Depository* account for a Transfer. A *Transfer* is initiated by an Originator to a Customer with an amount and flow of funds.
    ```
    Originator                 ->   Gateway   ->   Customer
     - OriginatorDepository                         - CustomerDepository
     - Type   (Push or Pull)
     - Amount (USD 12.43)
     - Status (Pending)
     ```
     If you find a security related problem please contact us at [`security@moov.io`](mailto:security@moov.io).
  version: "v1"
  title: "Moov API"
  contact:
    email: security@moov.io
    url: "https://groups.google.com/forum/#!forum/moov-users"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  - url: https://api.moov.io
    description: Production server
  # - url: https://sbx.moov.io
  #   description: Development server.
tags:
  - name: Batches
    description: Batch objects hold the Batch Header and Batch Control and all Entry Records and Addenda records for the Batch.
  - name: Customers
    description: Customer objects are an individual or business used to perform transfer's with an originator and track multiple transactions associated with the customer. The API allows you to create, delete, and update your customers. You can retrieve individual customers as well as a list of all your customers. (Entry Detail)
  - name: Depositories
    description: Depository objects represent a US bank or credit union that funds can be debited or credit from a transfer. A Depository must be associated with a customer or an originator. The API allows you to create, delete, and update your depositories. You can retrieve individual depositories as well as a list of all your depositories.
  - name: Events
    description: Event objects are a notification of a state change of a resource. When an Event is created any active webhooks will be notified.
  - name: Files
    description: File contains the structures of a ACH File. It contains one and only one File Header and File Control with at least one Batches.
  - name: Gateways
    description: Gateway objects identify the origin (sending point) and destination (receiving point) of the entries to be transferred. (File Header)
  - name: OAuth2
    description: OAuth2 endpoints are oriented towards providing automated access to Moov API.
  - name: Originators
    description: Originator objects are an organization or person that initiates an ACH Transfer to a Customer account either as a debit or credit. The API allows you to create, delete, and update your originators. You can retrieve individual originators as well as a list of all your originators. (Batch Header)
  - name: Transfers
    description: Transfer objects create a transaction initiated by an originator to a customer with a defined flow and fund amount. The API allows you to create or delete a transfers while the status of the transfer is pending.
  - name: User
    description: User represents an entity that can create api auth tokens used to make requests.

paths:
# SIGNUP / User Auth
  /v1/users/create:
    post:
      tags:
        - User
      summary: Create a new user using an email address not seen before.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/User'
      responses:
        '200':
          description: User object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid user information, check error(s).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal error, check error(s) and report the issue.
  /v1/users/login:
    get:
      tags:
        - User
      summary: Check if a cookie is valid and authentic for a user.
      operationId: checkUserLogin
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/cookie'
      responses:
        '200':
          description: User object
          headers:
            X-User-Id:
              description: Moov API userId
              schema:
                type: string
            Set-Cookie:
              schema:
                type: string
                example: moov_auth=c9c688d1; Path=/; Secure
        '403':
          description: Cookie data is invalid or expired. Login required.
    post:
      tags:
        - User
      summary: Attempt to login with an email and password
      operationId: userLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/Login'
      responses:
        '200':
          description: Successful login
          headers:
            Set-Cookie:
              description: Cookie data used to authenticate user.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request body, check error(s).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Invalid email and password combination. Retry with correct information.
    delete:
      tags:
        - User
      summary: Invalidat a user's cookie(s).
      operationId: userLogout
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/cookie'
      responses:
        '200':
          description: User cookies are invalidated.

# OAUTH2
  /v1/oauth2/authorize:
    get:
      tags:
        - OAuth2
      summary: Verify OAuth2 Bearer token
      operationId: checkOAuthClientCredentials
      security:
        - bearerAuth: []
      parameters:
        - name: Authorization
          in: header
          description: <ignored>
          schema:
            type: string
            example: Bearer eB2d415A
          required: true
      responses:
        '200':
          description: Successfully authorized via OAuth2.
        '400':
          description: Invalid OAuth2 access_token, check error(s)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/oauth2/client:
    post:
      tags:
        - OAuth2
      summary: Create OAuth2 client credentials
      operationId: createOAuth2Client
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/cookie'
      responses:
        '200':
          description: Created OAuth2 client credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Clients'
        '500':
          description: Internal error occurred, check error(s).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/oauth2/token:
    post:
      tags:
        - OAuth2
      summary: Generate OAuth2 access token
      operationId: createOAuth2Token
      security:
        - bearerAuth: []
      parameters:
        - name: grant_type
          in: query
          description: OAuth2 grant type (must be 'client_credentials')
          schema:
            type: string
            enum:
              - client_credentials
            default: client_credentials
        - name: client_id
          in: query
          description: OAuth2 client ID
          schema:
            type: string
        - name: client_secret
          in: query
          description: OAuth2 client secret
          schema:
            type: string
      responses:
        '200':
          description: OAuth2 Bearer access token
          content:
            application/json:
              schema:
                properties:
                  access_token:
                    description: OAuth2 Bearer access token
                    example: FFBDB35EDC67
                    type: string
                  expires_in:
                    description: Hours until access_token expires
                    type: integer
                    example: 7200
                  token_type:
                    type: string
                    example: Bearer
        '400':
          description: Missing parameters, check error(s)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

# FILES
  /v1/ach/files:
    get:
      tags:
      - Files
      summary: Gets a list of Files
      operationId: getFiles
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/cookie'
      responses:
        '200':
          description: A list of File objects
          headers:
            X-Total-Count:
              description: The total number of Originators
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Files'
  /v1/ach/files/create:
    post:
      tags:
      - Files
      summary: Create a new File object
      operationId: addFile
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/cookie'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/File'
          text/plain:
            schema:
              description: A plaintext ACH file
              type: string
              example: 101 222380104 1210428821805100000A094101Citadel                Bank Name
      responses:
        '201':
          description: A JSON object containing a new File
          headers:
            Location:
              description: The location of the new resource
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '400':
          description: "Invalid File Header Object"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/ach/files/{file_id}:
    get:
      tags:
      - Files
      summary: Retrieves the details of an existing File. You need only supply the unique File identifier that was returned upon creation.
      operationId: getFileByID
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/cookie'
        - $ref: '#/components/parameters/requestID'
        - name: file_id
          in: path
          description: File ID
          required: true
          schema:
            type: string
            example: 3f2d23ee214
      responses:
        '200':
          description: A File object for the supplied ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '404':
          description: A resource with the specified ID was not found
    post:
      tags:
      - Files
      summary: Updates the specified File Header by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
      operationId: updateFile
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - name: file_id
          in: path
          description: File ID
          required: true
          schema:
            type: string
            example: 3f2d23ee214
        - $ref: '#/components/parameters/cookie'
      requestBody:
        $ref: '#/components/requestBodies/File'
      responses:
        '201':
          description: A JSON object containing a new File
          headers:
            Location:
              description: The location of the new resource
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '400':
          description: "Invalid File Header Object"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - Files
      summary: Permanently deletes a File and associated Batches. It cannot be undone.
      operationId: deleteACHFile
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - name: file_id
          in: path
          description: File ID
          required: true
          schema:
            type: string
            example: 3f2d23ee214
        - $ref: '#/components/parameters/cookie'
      responses:
          '200':
            description: Permanently deleted File.
          '404':
            description: A File with the specified ID was not found.
  /v1/ach/files/{file_id}/contents:
    get:
      tags:
        - Files
      summary: Assembles the existing file (batches and controls) records, computes sequence numbers and totals. Returns plaintext file.
      operationId: getFileContents
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/requestID'
        - name: file_id
          in: path
          description: File ID
          required: true
          schema:
            type: string
            example: 3f2d23ee214
        - $ref: '#/components/parameters/cookie'
      responses:
        '200':
          description: File built successfully without errors.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RawFile'
  /v1/ach/files/{file_id}/validate:
    get:
      tags:
        - Files
      summary: Validates the existing file. You need only supply the unique File identifier that was returned upon creation.
      operationId: validateFile
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/requestID'
        - name: file_id
          in: path
          description: File ID
          required: true
          schema:
            type: string
            example: 3f2d23ee214
        - $ref: '#/components/parameters/cookie'
      responses:
        '200':
          description: File validated successfully without errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '500':
          # TODO(adam): should be a 4xx error
          description: Validation failed. Check response for errors

# Originators
  /v1/ach/originators:
    get:
      tags:
      - Originators
      summary: Gets a list of Originators
      operationId: getOriginators
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/cookie'
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/requestID'
      responses:
        '200':
          description: A list of Originator objects
          headers:
            X-Total-Count:
              description: The total number of Originators
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Originators'
    post:
      tags:
      - Originators
      summary: Create a new Originator object
      operationId: addOriginator
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/cookie'
        - $ref: '#/components/parameters/idempotencyKey'
        - $ref: '#/components/parameters/requestID'
      requestBody:
        $ref: '#/components/requestBodies/Originator'
      responses:
        '201':
          description: A JSON object containing a new Originator
          headers:
            Location:
              description: The location of the new resource
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Originator'
        '400':
          description: "Invalid Originator Object"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/ach/originators/{originatorId}:
    get:
      tags:
      - Originators
      summary: Retrieves the details of an existing Originator. You need only supply the unique Originator identifier that was returned upon customer creation.
      operationId: getOriginatorByID
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/cookie'
        - $ref: '#/components/parameters/requestID'
        - name: originatorId
          in: path
          description: Originator ID
          required: true
          schema:
            type: string
            example: 3f2d23ee
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: A Originator object for the supplied ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Originator'
        '404':
          description: A resource with the specified ID was not found
    patch:
      tags:
      - Originators
      summary: Updates the specified Originator by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
      operationId: updateOriginator
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/cookie'
        - name: originatorId
          in: path
          description: Originator ID
          required: true
          schema:
            type: string
            example: 3f2d23ee
        - $ref: '#/components/parameters/idempotencyKey'
        - $ref: '#/components/parameters/requestID'
      requestBody:
        $ref: '#/components/requestBodies/Originator'
      responses:
        '201':
          description: A JSON object containing a new Originator
          headers:
            Location:
              description: The location of the new resource
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Originator'
        '400':
          description: "Invalid Originator Object"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - Originators
      summary: Permanently deletes an Originator and associated Customers, Depositories, and Transfers. It cannot be undone. Also immediately cancels any active Transfers for the Originator.
      operationId: deleteOriginator
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - name: originatorId
          in: path
          description: Originator ID
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/cookie'
        - $ref: '#/components/parameters/requestID'
      responses:
          '200':
            description: Permanently deleted Originator.
          '404':
            description: A originator with the specified ID was not found.

# CUSTOMERS
  /v1/ach/customers:
    get:
      tags:
      - Customers
      summary: Gets a list of Customers
      operationId: getCustomers
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/cookie'
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/requestID'
      responses:
        '200':
          description: A list of Customer objects
          headers:
            X-Total-Count:
              description: The total number of Customers
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customers'
    post:
      tags:
      - Customers
      summary: Create a new Customer object
      operationId: addCustomers
      security:
        - bearerAuth: []
        - cookieAuth: []
      requestBody:
        $ref: '#/components/requestBodies/Customer'
      parameters:
        - $ref: '#/components/parameters/cookie'
        - $ref: '#/components/parameters/idempotencyKey'
        - $ref: '#/components/parameters/requestID'
      responses:
        '201':
          description: A JSON object containing a new Customer
          headers:
            Location:
              description: The location of the new resource
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: "Invalid Customer Object"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/ach/customers/{customerId}:
    get:
      tags:
      - Customers
      summary: Get a Customer by ID
      operationId: getCustomerByID
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - name: customerId
          in: path
          description: Customer ID
          required: true
          schema:
            type: string
            example: feb492e6
        - $ref: '#/components/parameters/cookie'
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/requestID'
      responses:
        '200':
          description: A Customer object for the supplied Customer ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: A customer object with the specified ID was not found.
    patch:
      tags:
      - Customers
      summary: Updates the specified Customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
      operationId: updateCustomer
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - name: customerId
          in: path
          description: Customer ID
          required: true
          schema:
            type: string
            example: feb492e6
        - $ref: '#/components/parameters/cookie'
        - $ref: '#/components/parameters/idempotencyKey'
        - $ref: '#/components/parameters/requestID'
      requestBody:
        $ref: '#/components/requestBodies/Customer'
      responses:
        '201':
          description: A JSON object containing a new Customer
          headers:
            Location:
              description: The location of the new resource
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: "Invalid Customer Object"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: A customer object with the specified ID was not found.
    delete:
      tags:
        - Customers
      summary: Permanently deletes a customer and associated depositories and transfers. It cannot be undone. Immediately cancels any active Transfers for the customer.
      operationId: deleteCustomer
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
      - name: customerId
        in: path
        description: Customer ID
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/bearerToken'
      - $ref: '#/components/parameters/cookie'
      - $ref: '#/components/parameters/requestID'
      responses:
        '200':
          description: Permanently deleted Customer.
        '404':
          description: A customer with the specified ID was not found.
  /v1/ach/customers/{customerId}/depositories:
    get:
      tags:
      - Customers
      summary: Get a list of Depository accounts for a Customer
      operationId: getDepositoriesByCustomerID
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - name: customerId
          in: path
          description: Customer ID
          required: true
          schema:
            type: string
            example: feb492e6
        - $ref: '#/components/parameters/cookie'
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/requestID'
      responses:
        '200':
          description: A list of Depository objects for a Customer ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Depositories'
  /v1/ach/customers/{customerId}/depositories/{depositoryId}:
    get:
      tags:
      - Customers
      summary: Get a Depository accounts for a Customer based on it's ID
      operationId: getDepositoriesByID
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - name: customerId
          in: path
          description: Customer ID
          required: true
          schema:
            type: string
            example: feb492e6
        - name: depositoryId
          in: path
          description: Depository ID
          required: true
          schema:
            type: string
            example: 0c5e215c
        - $ref: '#/components/parameters/cookie'
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/requestID'
      responses:
        '200':
          description: A Depository objects for the supplied ID
          headers:
            Location:
              description: The location of the new resource
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Depository'
        '404':
          description: A resource object with the specified ID was not found.

# DEPOSITORIES
  /v1/ach/depositories:
    get:
      tags:
      - Depositories
      summary: A list of all Depository objects for the authentication context.
      operationId: getDepositories
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/cookie'
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/requestID'
      responses:
        '200':
          description: A list of Depository objects
          headers:
            X-Total-Count:
              description: The total number of Depositories
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Depositories'
    post:
      tags:
      - Depositories
      summary: Create a new depository account for a Customer ID or Originator ID defined in the Parent parameter
      operationId: addDepository
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/cookie'
        - $ref: '#/components/parameters/idempotencyKey'
        - $ref: '#/components/parameters/requestID'
      requestBody:
        $ref: '#/components/requestBodies/Depository'
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: The location of the new resource
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Depository'
        '400':
          description: "Invalid Depository Object"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/ach/depositories/{depositoryId}:
    get:
      tags:
      - Depositories
      summary: Get a Depository object for the supplied ID
      operationId: getDepositoryByID
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - name: depositoryId
          in: path
          description: Depository ID
          required: true
          schema:
            type: string
            example: 0c5e215c
        - $ref: '#/components/parameters/cookie'
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/requestID'
      responses:
        '200':
          description: A depository object for the supplied ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Depository'
        '404':
          description: A resource object with the specified ID was not found.
    patch:
      tags:
      - Depositories
      summary: Updates the specified Depository by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
      operationId: updateDepository
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - name: depositoryId
          in: path
          description: Depository ID
          required: true
          schema:
            type: string
            example: feb492e6
        - $ref: '#/components/parameters/cookie'
        - $ref: '#/components/parameters/idempotencyKey'
        - $ref: '#/components/parameters/requestID'
      requestBody:
        $ref: '#/components/requestBodies/Depository'
      responses:
        '201':
          description: A JSON object containing a new Depository
          headers:
            Location:
              description: The location of the new resource
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Depository'
        '400':
          description: "Invalid Depository Object"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: A resource object with the specified ID was not found.
    delete:
      tags:
      - Depositories
      summary: Permanently deletes a depository and associated transfers. It cannot be undone. Immediately cancels any active Transfers for the depository.
      operationId: deleteDepository
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - name: depositoryId
          in: path
          description: Depository ID
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/cookie'
        - $ref: '#/components/parameters/requestID'
      responses:
        '200':
          description: Permanently deleted Depository.
        '404':
          description: A depository with the specified ID was not found.
  /v1/ach/depositories/{depositoryId}/micro-deposits:
    post:
      tags:
      - Depositories
      summary: Initiates micro deposits to be sent to the Depository institution for account validation
      operationId: createMicroDeposits
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - name: depositoryId
          in: path
          description: Depository ID
          required: true
          schema:
            type: string
            example: feb492e6
        - name: amounts
          in: query
          description: amounts that have been deposited
          schema:
            type: array
            items:
              type: string
              example: "USD 0.02"
        - $ref: '#/components/parameters/cookie'
        - $ref: '#/components/parameters/idempotencyKey'
        - $ref: '#/components/parameters/requestID'
      responses:
        '200':
          description: Micro deposits verified
          headers:
            Location:
              description: The location of the new resource
              schema:
                type: string
                format: uri
        '201':
          description: Micro deposits initiated
        '400':
          description: Invalid Amounts
        '404':
          description: A depository with the specified ID was not found.
        '409':
          description: Too many attempts. Bank already verified.

# TRANSFERS
  /v1/ach/transfers:
    get:
      tags:
      - Transfers
      summary: A list of all Transfer objects
      operationId: getTransfers
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/cookie'
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/startDate'
        - $ref: '#/components/parameters/endDate'
        - $ref: '#/components/parameters/requestID'
      responses:
        '200':
          description: A list of Transfer objects
          headers:
            X-Total-Count:
              description: The total number of Transfers
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transfers'
    post:
      tags:
      - Transfers
      summary: Create a new transfer between an Originator and a Customer. Transfers cannot be modified. Instead delete the old and create a new transfer.
      operationId: addTransfer
      parameters:
        - $ref: '#/components/parameters/cookie'
        - $ref: '#/components/parameters/idempotencyKey'
        - $ref: '#/components/parameters/requestID'
      security:
        - bearerAuth: []
        - cookieAuth: []
      requestBody:
        $ref: '#/components/requestBodies/Transfer'
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: The location of the new resource
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transfer'
        '400':
          description: "Invalid Transfer Object"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/ach/transfers/batch:
    post:
      tags:
        - Transfers
      summary: Create a new list of transfer, validate, build, and process. Transfers cannot be modified.
      operationId: addTransfers
      parameters:
        - $ref: '#/components/parameters/cookie'
        - $ref: '#/components/parameters/idempotencyKey'
        - $ref: '#/components/parameters/requestID'
      security:
        - bearerAuth: []
        - cookieAuth: []
      requestBody:
        $ref: '#/components/requestBodies/Transfers'
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transfers'
        '400':
          description: "Invalid Transfer(s) Object"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/ach/transfers/{transferId}:
    get:
      tags:
      - Transfers
      summary: Get a Transfer object for the supplied ID
      operationId: getTransferByID
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - name: transferId
          in: path
          description: Transfer ID
          required: true
          schema:
            type: string
            example: 33164ac6
        - $ref: '#/components/parameters/cookie'
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/requestID'
      responses:
        '200':
          description: A transfer object for the supplied ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transfer'
        '404':
          description: A resource object with the specified ID was not found.
    delete:
      tags:
      - Transfers
      summary: It is possible to recall (delete) a transfer before it has been released from the financial institution.
      operationId: deleteTransferByID
      parameters:
        - name: transferId
          in: path
          description: Transfer ID
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/cookie'
        - $ref: '#/components/parameters/requestID'
      security:
        - bearerAuth: []
        - cookieAuth: []
      responses:
        '200':
          description: Transfer has been deleted.
        '404':
          description: A transfer with the specified ID was not found.
  /v1/ach/transfers/{transferId}/failed:
    post:
      tags:
        - Transfers
      summary: Get the NACHA return code and description
      operationId: getTransferNachaCode
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - name: transferId
          in: path
          description: Transfer ID
          required: true
          schema:
            type: string
            example: 33164ac6
        - $ref: '#/components/parameters/cookie'
        - $ref: '#/components/parameters/requestID'
      responses:
        '200':
          description: TODO, check error json
        '404':
          description: Returned if no errors were found.
  /v1/ach/transfers/{transferId}/files:
    post:
      tags:
        - Transfers
      summary: Get the ACH files to be used in this transfer.
      operationId: getTransferFiles
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - name: transferId
          in: path
          description: Transfer ID
          required: true
          schema:
            type: string
            example: 33164ac6
        - $ref: '#/components/parameters/cookie'
        - $ref: '#/components/parameters/requestID'
      responses:
        '200':
          description: The ACH files generated for a transfer.
          # TODO(adam): needs Open API specs merged for this $ref to work..
          # content:
          #   application/json:
          #     schema:
          #       $ref: '#/components/schemas/Files'
        '400':
          description: ACH files failed validation, check response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/ach/transfers/{transferId}/events:
    get:
      tags:
      - Transfers
      summary: Get all Events associated with the Transfer object's for the supplied ID
      operationId: getTransferEventsByID
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - name: transferId
          in: path
          description: Transfer ID
          required: true
          schema:
            type: string
            example: 33164ac6
        - $ref: '#/components/parameters/cookie'
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/requestID'
      responses:
        '200':
          description: A list of Event objects for the supplied Transfer ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
        '404':
          description: A resource object with the specified ID was not found.

# EVENTS
  /v1/ach/events:
    get:
      tags:
      - Events
      summary: Gets a list of Events
      operationId: getEvents
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/cookie'
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/startDate'
        - $ref: '#/components/parameters/endDate'
        - $ref: '#/components/parameters/requestID'
      responses:
        '200':
          description: A list of Event objects
          headers:
            X-Total-Count:
              description: The total number of Events
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
  /v1/ach/events/{eventId}:
    get:
      tags:
      - Events
      summary: Get a Event by ID
      operationId: getEventByID
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - name: eventId
          in: path
          description: Event ID
          required: true
          schema:
            type: string
            example: 94cf1126
        - $ref: '#/components/parameters/cookie'
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/requestID'
      responses:
        '200':
          description: A Event object for the supplied Customer ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: A event object with the specified ID was not found.
# GATEWAYS
  /v1/ach/gateways:
    get:
      tags:
        - Gateways
      summary: Gets a list of Gatways
      operationId: getGateways
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/cookie'
      responses:
        '200':
          description: A list of Gateway objects
          headers:
            X-Total-Count:
              description: The total number of Events
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gateways'
    post:
      tags:
      - Gateways
      summary: Create a new Gateway object
      operationId: addGateway
      parameters:
        - $ref: '#/components/parameters/cookie'
        - $ref: '#/components/parameters/idempotencyKey'
        - $ref: '#/components/parameters/requestID'
      security:
        - bearerAuth: []
        - cookieAuth: []
      requestBody:
        $ref: '#/components/requestBodies/Gateway'
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: The location of the new resource
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gateway'
        '400':
          description: "Invalid Gateway Object"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

# WEBHOOK callback subscription
# TODO implement webhooks https://swagger.io/docs/specification/callbacks/

# Health and liveness probes
  /v1/ach/ping:
    get:
      tags:
      - Monitor
      operationId: pingACH
      summary: Check that the moov-io/ach service is running
      responses:
        '200':
          description: Service is running properly
  /v1/auth/ping:
    get:
      tags:
      - Monitor
      operationId: pingAuth
      summary: Check that the moov-io/auth service is running
      responses:
        '200':
          description: Service is running properly
  /v1/paygate/ping:
    get:
      tags:
      - Monitor
      operationId: pingPaygate
      summary: Check that the moov-io/paygate service is running
      responses:
        '200':
          description: Service is running properly

# COMPONENTS
components:
  schemas:
    OAuth2Client:
      properties:
        client_id:
          description: OAuth2 client ID
          type: string
          example: 9f2d213ee2a
        client_secret:
          description: OAuth2 client secret
          type: string
          example: 26e4fe61
        domain:
          description: HTTP domain for OAuth credentials
          type: string
          example: api.moov.io
    OAuth2Clients:
      type: array
      items:
        $ref: '#/components/schemas/OAuth2Client'
    User:
      properties:
        id:
          description: Moov API user ID
          type: string
          example: c05ad98a
        email:
          description: Email address associated to the user
          type: string
          example: user@example.com
        firstName:
          type: string
          example: Taylor
        lastName:
          type: string
          example: Swift
        phone:
          description: Phone number associated to user
          example: 555.555.5555
        companyUrl:
          description: Company URL associated to user
          type: string
          format: uri
          example: https://moov.io
        createdAt:
          description: Timestamp of when user was created
          type: string
          format: date-time
          example: 2018-10-03T22:35:06
    Login:
      properties:
        email:
          description: Email address associated to the User
          type: string
          example: "user@example.com"
        password:
          description: Password associated to User
          type: string
          example: long_passphrase_unique_per_site
    File:
      properties:
        id:
          type: string
          description: File ID
          example: 3f2d23ee214
        FileHeader:
          $ref: '#/components/schemas/FileHeader'
    RawFile:
      type: string
      example: 101 222380104 1210428821805100000A094101Citadel                Bank Name
    Files:
      type: array
      items:
        $ref: '#/components/schemas/File'
    FileHeader:
      required:
        - immediateOrigin
        - immediateOriginName
        - immediateDestination
        - immediateDestinationName
      properties:
        id:
          description: File Header ID (same as File)
          type: string
          example: 3f2d23ee214
        immediateOrigin:
          type: string
          description: contains the Routing Number of the ACH Operator or sending point that is sending the file.
          minLength: 9
          maxLength: 10
          example: "99991234"
        immediateOriginName:
          type: string
          description: The name of the ACH operator or sending point that is sending the file.
          maxLength: 23
          example: My Bank Name
        immediateDestination:
          type: string
          maxLength: 10
          minLength: 9
          example: "69100013"
          description: contains the Routing Number of the ACH Operator or receiving point to which the file is being sent
        immediateDestinationName:
          type: string
          description: The name of the ACH or receiving point for which that file is destined.
          maxLength: 23
          example: Federal Reserve Bank
        fileCreationDate:
          type: string
          description: expressed in a "YYMMDD" format. The File Creation Date is the date on which the file is prepared by an ODFI
          example: "102318"
          minLength: 6
          maxLength: 6
        fileCreationTime:
          type: string
          description: Expressed in "HHMM" (24 hour clock) format.
          example: "1601"
          minLength: 4
          maxLength: 4
    Error:
      required:
        - error
      properties:
        error:
          type: string
          description: An error message describing the problem intended for humans.
          example: Validation error(s) present.
    Originator:
      properties:
        id:
          type: string
          description: Originator ID
          example: 724b6abe
        defaultDepository:
          type: string
          description: The depository account to be used by default per transfer. ID must be a valid Originator Depository account
          example: 0c0c3412
        identification:
          type: string
          maxLength: 14
          description: An identification number by which the customer is known to the originator.
          example:
        metadata:
          type: string
          description: Additional meta data to be used for display only
          example: Primary payment account
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
    Originators:
      type: array
      items:
        $ref: '#/components/schemas/Originator'
    Customer:
      properties:
        id:
          type: string
          description: Customer ID
          example: feb492e6
        email:
          type: string
          description: The customers email address
          format: e-mail
        defaultDepository:
          type: string
          description: The depository account to be used by default per transfer. ID must be a valid Customer Depository account
          example: 0c5e215c
        status:
          type: string
          description: Defines the status of the Customer
          enum:
            - unverified
            - verified
            - suspended
            - deactivated
        metadata:
          type: string
          description: Additional meta data to be used for display only
          example: Authorized for re-occurring WEB
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
    Customers:
      type: array
      items:
        $ref: '#/components/schemas/Customer'
    Depository:
      properties:
        id:
          type: string
          description: Depository ID
          example: 0c5e215c
        bankName:
          type: string
          description: Legal name of the financial institution.
          example: "MVB Bank, Inc."
        holder:
          type: string
          description: Legal holder name on the account
          example: "My Company,llc or Wade Arnold"
        holderType:
          type: string
          description: Defines the type of entity of the account holder as an *individual* or *company*
          enum:
            - individual
            - company
        type:
          type: string
          description: Defines the account as *checking* or *savings*
          enum:
            - Checking
            - Savings
          example: "checking"
        routingNumber:
          type: string
          description: The ABA routing transit number for the depository account.
          example: "051504597"
        accountNumber:
          type: string
          description: The account number for the depository account
          example: "0001027028"
        status:
          type: string
          description: Defines the status of the Depository account
          enum:
            - unverified
            - verified
        metadata:
          type: string
          description: Additional meta data to be used for display only
          example: Payroll
        parent:
          type: string
          description: The depository owner's valid Customer ID or Originator ID
          example: feb492e6
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
      required:
      - holder
      - holderType
      - type
      - routingNumber
      - accountNumber
    Depositories:
      type: array
      items:
        $ref: '#/components/schemas/Depository'
    Transfer:
      properties:
        id:
          type: string
          description: Optional ID to uniquely identify this transfer. If omitted, one will be generated
          example: 33164ac6
        type:
          type: string
          enum:
            - "push"
            - "pull"
          example: "push"
          description: Type of transaction being actioned against the receiving institution. Expected values are pull (debits) or push (credits). Only one period used to signify decimal value will be included.
        amount:
          type: string
          format: currency
          example: "USD 99.99"
          description: Amount of money. USD - United States.
        originator:
          type: string
          example: 724b6abe
          description: ID of the Originator account initiating the transfer.
        originatorDepository:
          type: string
          example: 59276ce4
          description: ID of the Originator Depository to be be used to override the default depository.
        customer:
          type: string
          example: feb492e6
          description: ID of the Customer account the transfer was sent to.
        customerDepository:
          type: string
          example: dad7ddfb
          description: ID of the Customer Depository to be used to override the default depository
        description:
          type: string
          description: Brief description of the transaction, that may appear on the receiving entity’s financial statement
          example: Loan Pay
          minLength: 1
          maxLength: 79
        standardEntryClassCode:
          type: string
          description: Standard Entry Class code will be generated based on Customer type for CCD and PPD
          example: WEB
        status:
          type: string
          description: Defines the state of the Transfer
          enum:
            - processed
            - pending
            - canceled
            - failed
            - reclaimed
        sameDay:
          type: boolean
          default: false
          description: When set to true this indicates the transfer should be processed the same day if possible.
        created:
          type: string
          format: date-time
        WEBDetail:
          $ref: '#/components/schemas/WEBDetail'
      required:
        - type
        - amount
        - customer
        - originator
        - description
    Transfers:
      type: array
      items:
        $ref: '#/components/schemas/Transfer'
    Gateway:
      properties:
        id:
          type: string
          description: ID to uniquely identify a gateway
        origin:
          type: string
          description: Routing Number - four digit Federal Reserve Routing Symbol and the four digit ABA Institution Identifier
          example: 99991234
        originName:
          type: string
          description: Legal name associated with the origin routing number.
          example: My Bank Name
        destination:
          type: string
          description: Routing Number - four digit Federal Reserve Routing Symbol and the four digit ABA Institution Identifier
          example: 69100013
        destinationName:
          type: string
          description: Legal name associated with the destination routing number
          example: Federal Reserve Bank
        created:
          type: string
          format: date-time
      required:
        - id
        - origin
        - originName
        - destination
        - destinationName
    Gateways:
      type: array
      items:
        $ref: '#/components/schemas/Gateway'
    Event:
      properties:
        id:
          type: string
          description: ID to uniquely identify a event
          example: 94cf1126
        topic:
          type: string
          description: Type of event
          example: transfer_created
        message:
          type: string
          description: A human readable description of the topic
          example: A bank transfer was created
        type:
          type: string
          enum:
            - "Originator"
            - "Customer"
            - "Depository"
            - "Transfer"
          example: Transfers
        resource:
          type: string
          description: ID of the resource type the event was generated on behalf of.
          example: dad7ddfb-71cd-4699-add4-2867878d154f
        created:
          type: string
          format: date-time
    Events:
      type: object
      items:
        $ref: '#/components/schemas/Event'
    WEBDetail:
      properties:
        PaymentType:
          type: string
          description: Defines if the transfer is authorized for a single transaction or reoccurring
          enum:
            - "single"
            - "reoccurring"
          example: single
  requestBodies:
    User:
      description: A Moov API User object
      required: true
      content:
        application/json:
          schema:
            properties:
              email:
                description: Email address associated to the User
                type: string
              password:
                description: Password associated to User
                type: string
              firstName:
                type: string
              lastName:
                type: string
              phone:
                description: Phone number associated to user
              companyUrl:
                description: Company URL associated to user
                type: string
                format: uri
    Login:
      description: Authenticating with an email and password
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Login'
    File:
      description: A JSON object containing a new File
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FileHeader'
    Originator:
      description: A JSON object containing a new Originator
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Originator'
    Customer:
      description: A JSON object containing a new Customer
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Customer'
    Depository:
      description: A JSON object containing a new Depository
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Depository'
    Transfer:
      description: A JSON object containing a new Transfer
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Transfer'
    Transfers:
      description: A JSON array containing Transfers
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Transfers'
    Gateway:
      description: A JSON object containing a new Gateway
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Gateway'
  parameters:
    cookie:
      name: cookie
      in: cookie
      schema:
        type: string
      description: moov_auth Cookie
    bearerToken:
      in: header
      name: Authorization
      description: OAuth2 Bearer token
      example: Bearer A4CA3074
      schema:
        type: string
    offsetParam:
      in: query
      name: offset
      required: false
      description: The number of items to skip before starting to collect the result set
      schema:
        type: integer
        minimum: 1
        default: 0
    limitParam:
      in: query
      name: limit
      description: The number of items to return
      required: false
      schema:
        type: integer
        minimum: 0
        maximum: 100
        default: 25
        example: 10
    idempotencyKey:
      in: header
      name: X-Idempotency-Key
      description: Idempotent key in the header which expires after 24 hours. These strings should contain enough entropy for to not collide with each other in your requests.
      example: a4f88150
      required: false
      schema:
        type: string
    requestID:
      in: header
      name: X-Request-Id
      description: Optional Request ID allows application developer to trace requests through the systems logs
      example: rs4f9915
      schema:
        type: string
    startDate:
      in: query
      name: startDate
      description: Filter objects created after this date. ISO-8601 format YYYY-MM-DD. Can optionally be used with endDate to specify a date range.
      schema:
        type: string
        format: date-time
    endDate:
      in: query
      name: endDate
      description: Filter objects created before this date. ISO-8601 format YYYY-MM-DD. Can optionally be used with startDate to specify a date range.
      schema:
        type: string
        format: date-time
  securitySchemes:
    bearerAuth:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://api.moov.io/v1/oauth2/token
          # TODO(adam): more fine grained controls..
          scopes: {}
    cookieAuth:
      type: apiKey
      in: header
      name: Cookie
      description: moov_auth Cookie header
      # We should be able to use 'in: cookie'
      # https://github.com/OpenAPITools/openapi-generator/issues/208
      # in: cookie
      # name: moov_auth
